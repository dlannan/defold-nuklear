local tinsert = table.insert

local nkgui = require("nuklear.utils.gui")

local pngloader = require("nuklear.utils.png-loader")
local img1 = nil
local img2 = nil
--------------------------------------------------------------------------------

function init(self)

	msg.post("@render:", "clear_color", {color = vmath.vector4(0, 0, 0, 1)})
	-- size of texture when scaled to nearest power of two

	-- Window with pictures in it
	self.win1 = {
		x = 30,
		y = 300,
		w = 400,
		h = 600,
	}

	-- Window with tabs
	self.win2 = {
		x = 30,
		y = 300,
		w = 800,
		h = 600,
	}

	-- Show the window that can be toggled
	self.winshow = 1

	-- Use the tech theme
	self.fancy = 1

	-- Load in two fonts to use
	self.fonts = {
		text1 = {
			path = "/example/fonts/Teachers-VariableFont_wght.ttf",
			size = 16.0,
			resolution = 2048,
		},
		fa = {
			path = "/example/fonts/fontawesome-webfont.ttf",
			size = 16.0, 
			resolution = 2048
		},
	}

	self.text1 = "Test1"
	self.text2 = "Test2"
	self.check1 = 0

	local scale_texture = 1.0
	nkgui:init( "/camera#camera", scale_texture)
	
	-- Init is now done in the nuklear_gui gameobject script
	nkgui:add_fonts( self.fonts )
	nuklear.set_font( self.fonts.text1.fontid )

	nuklear.show_cursor(1)
	defos.set_cursor_visible(false)

	img1 = pngloader.load("/example/images/image1.png")
	img2 = pngloader.loadbuffer("example/images/image2.png")
	img3 = pngloader.loadbuffer("example/images/icon.png")
end

--------------------------------------------------------------------------------
imagehit = 0

local function panel_func( self, left, top, width, height )
	
	nuklear.set_font( self.fonts.text1.fontid )
	nuklear.fill_rect(left, top, width + 30, height + 30, 0, 0xff000000)
	
	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_begin(30, 2)

	nuklear.layout_space_push(10, 5, 60, 20)
	nuklear.label("text 1", 1)
	
	nuklear.layout_space_push(70, 0, 30, 30)
	nuklear.button_image(img1)
	nuklear.layout_space_end()

	nuklear.layout_row_dyn(100, 1)
	if(nuklear.group_begin("Group2", nkgui.flags.NK_WINDOW_TITLE) ~= 0) then

		-- nuklear.layout_row_static(10, 400, 1)
		nuklear.layout_row_dyn(20, 1)
		nuklear.label("text 2", 1)
		nuklear.group_end()
	end
	
	imagehit = nuklear.selectable_image_label( "Test", img1, 2, imagehit )
	if(imagehit == 1) then 
		pprint("Image hit: "..imagehit) 
	end
	nuklear.layout_row_dyn(300, 2)
	nuklear.image_color( img2, 0x00797979 )
	nuklear.image_color( img3, 0x00797979 )

	self.th_scene = nuklear.layout_tree_push(1, "Scene", self.th_scene or 1)

	if (self.th_scene ~= 0) then 
		nuklear.layout_row_dyn(50, 2)
		nuklear.label("text 1", 1)	
		nuklear.label("text 2", 1)
		nuklear.layout_tree_pop()
	end
	
	self.th_cameras = nuklear.layout_tree_push(1, "Cameras", self.th_cameras or 1)
	
	if (self.th_cameras ~= 0) then
		nuklear.layout_row_dyn(50, 2)
		nuklear.set_font( self.fonts.fa.fontid )
		nuklear.label(" ", 1)
		nuklear.set_font( self.fonts.text1.fontid )
		nuklear.label("text 2", 1)
		nuklear.layout_tree_pop()
	end

	nuklear.layout_row_dyn(24, 1)
	self.text1 = nuklear.edit_string(0,  self.text1, 10, 1)
	nuklear.layout_row_dyn(24, 1)
	self.text2 = nuklear.edit_string(1, self.text2, 10, 1)

	nuklear.layout_row_dyn(24, 1)
	self.check1 = nuklear.check_label("Test Check", self.check1)
end

--------------------------------------------------------------------------------
local names = { "Lines", "Columns", "Mixed" }
local selected = 1
local label_select = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
local combo_tbl = {"Item1", "Item2", "Item3", "Item4" }
local combo_select = 1

local function tab_panel_func( self, left, top, width, height )

	nuklear.style_push_vec2( "window.spacing", 0, 0 )
	nuklear.style_push_float( "button.rounding", 0 )
	nuklear.layout_row_begin(20, 3)

	local wwidth = 100
	for i=1, 3 do 
		nuklear.layout_row_push( wwidth )
		if(selected == i) then 
			nuklear.button_label_active( names[i] )
		else
			local res = nuklear.button_label( names[i] )
			if(res == 1) then selected = i end
		end
	end
	nuklear.layout_row_end()
	nuklear.style_pop_float()
	nuklear.style_pop_vec2()
	
	if(selected == 1) then 

		nuklear.layout_row_dyn(340, 1)
		if(nuklear.group_begin("Group2", nkgui.flags.NK_WINDOW_BORDER) ~= 0) then
			
			-- nuklear.layout_row_static(10, 400, 1)
			for id = 1, 10 do
				
				nuklear.layout_row_dyn(20, 3)
				label_select[id] = nuklear.selectable_label("Obj"..id, 1, label_select[id])

				local x, y, w, h = nuklear.widget_bounds()
				nuklear.draw_text( x, y, 100, h, "text"..id, 0xffffffff, 0x00000000 )
				--nuklear.label("timeline", 1)

				nuklear.push_scissor(x, y, w/2, 2)
				
				-- nuklear.fill_rect(x, y, w, y, 0, 0xffff00ff)
				nuklear.stroke_line(x, y, x + w, y, 4, 0xffff00ff)
				local click = nuklear.is_widget_mouse_clicked( 0x0 )
				local down = nuklear.is_widget_mouse_down( 0x0, 1 )
				if(down == 1) then pprint("click: "..click.."  down:"..down.."   id: "..id) end

				nuklear.push_scissor(-1, -1, -1, -1)
			end
			
			nuklear.group_end()
		end
	end

	if(selected == 2) then 
		nuklear.layout_row_dyn(40, 1)
		nuklear.label("Tab 2", 2)
		nuklear.layout_row_dyn(30, 1)
		combo_select = nuklear.combo( combo_tbl, combo_select, 25, 200, 200 )
	end
	if(selected == 3) then 
		nuklear.layout_row_dyn(340, 1)
		nuklear.label("Tab 3", 2)
	end	

	nkgui.do_update = nuklear_update
end



--------------------------------------------------------------------------------

local chart = {
	0xff29f9e5, 
	-1.0,
	-0.8,
	-0.4,
	0.0,
	0.4,
	0.8,
	1.0,
	-1.0,
	1.0,
	-1.0,
	1.0,
}

local chart_timer = 0.0

local function update_chart(dt)
	chart_timer = chart_timer + dt 
	if(chart_timer > 1.0) then 
		chart_timer = chart_timer - 1.0
		local new_value = math.random(-1.0, 1.0) 
		-- copy down 
		for i=11, 2, -1 do 
			chart[i+1] = chart[i]
		end 
		chart[2] = new_value
	end
end

--------------------------------------------------------------------------------
local ctr = 0

function update(self, dt)

	update_chart(dt)
	nkgui:update()

	local sec = os.clock()
	local hr = tonumber(os.date("%H")) / 24
	local min = tonumber(os.date("%M")) / 60
	local datetime = os.date("%X %p")

	local fancystr = "Tech Theme"
	if(self.fancy == 1) then fancystr = "Common Theme" end
	local press = nkgui:widget_button(fancystr, 500, 10, 150, 30)
	if(press == 1) then self.fancy = 1-self.fancy end

		
	if(self.fancy == 1) then 
		nkgui.themes.tech()
		
		nkgui:widget_text(0, 0, "App Time:", datetime, hr, min )
		nkgui:widget_text_movable( 50, 100, 20, "Test Node 1", " ", 1.0, 1.0 )
		
		local posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 150, 660-posx, "Moving Handle", " ", 1.0, 1.0 )

		posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 190, 20, "Moving Widget", " ", 1.0, 1.0 )

		local posy = math.sin(sec) * 100 + 200
		nkgui:widget_text(10, posy, "Moving Text", datetime, hr, min )

		posy = math.cos(sec) * 100 + 200
		nkgui:widget_text(250, posy, "Moving Text", "with bars", math.sin(sec) * 0.5 + 0.5, math.cos(sec) * 0.5 + 0.5 )

		-- if(self.winshow == 1) then
		local old = nuklear.bgcolor_window(0xff000000)
		self.win1 = nkgui:widget_panel("Main Panel", self.win1.x, self.win1.y, self.win1.w, self.win1.h, panel_func, self)
		--self.win1.y = self.win1.y - nkgui.edge_top

		local minimized = nuklear.is_window_minimized("Main Panel")
		if(minimized ~= 0) then pprint("Main Panel Minimized") end
		--end 

		self.win2 = nkgui:widget_panel("Tab Panel", self.win2.x + 800, self.win2.y, self.win2.w, self.win2.h, tab_panel_func, self)
		-- Restore this, or it can accumulate. 
		self.win2.x  = self.win2.x - 800
		-- self.win2.y = self.win2.y - nkgui.edge_top

		minimized = nuklear.is_window_minimized("Tab Panel")
		if(minimized ~= 0) then pprint("Tab Panel Minimized") end			

		nuklear.bgcolor_window(old)
		
		local button = nkgui:widget_button("Show Panel", 30, 250, 150, 30)
		if(button == 1 and button ~= self.prev_button) then self.winshow = 1-self.winshow end
		self.prev_button = button

		nkgui:widget_panel("Chart", 600, 300, 200, 80, function( left,top,width, height)
			nuklear.layout_row_dyn(20, 1)
			local hovered = nuklear.is_widget_hovered()
			if(hovered == 1) then ctr = ctr + 1 else ctr = 1 end 
			if(ctr > 100) then nuklear.tooltip("This chart is a chart!!!") end
			nuklear.line_chart(0x1, chart)
		end)

		nkgui:widget_chart_movable( posx, 400, 200, "Moving Chart", 1.0, 1.0, chart )
		nkgui:widget_chart(600, posy + 300, "Moving Chart", hr, min, chart )

	else 
		nkgui.themes.default()
		nuklear.overview_demo(10, 460)
	end

	nkgui:render()
end

--------------------------------------------------------------------------------

function on_input(self, action_id, action)

end

--------------------------------------------------------------------------------

