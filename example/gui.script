local tinsert = table.insert

local nkgui = require("nuklear.utils.gui")

--------------------------------------------------------------------------------

function init(self)

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/camera#camera", "acquire_camera_focus")
	
	msg.post("@render:", "clear_color", {color = vmath.vector4(0, 0, 0, 1)})
	-- size of texture when scaled to nearest power of two

	self.winx = 30
	self.winy = 300
	self.winw = 400
	self.winh = 300

	self.winshow = 1

	self.fancy = 0

	if(self.fancy == 0) then 	
		-- Green theme
		nkgui.colors.bg1 = 0xff177772
		nkgui.colors.bg2 = 0xff29f9e5
		nkgui.colors.fg1 = 0x800c3d46
		nkgui:init(960, 960, 0, 3, "/example/fonts/Pointless.ttf")
	else 
		nkgui:init(960, 960, 255, 4, "/example/fonts/Pointless.ttf")
	end
	self.winshow = nkgui:widget_panel("Main Panel", 30, 300, 400, 300, panel_func)
end

--------------------------------------------------------------------------------

local function panel_func( left, top, width, height )
	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_begin(50, 2)
	nuklear.layout_space_push(22, 0, 300, 30)
	nuklear.label("text 1", 1)

	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_push(55, 20, 300, 30)
	nuklear.label("text 2", 1)
	nuklear.layout_space_end()
end

--------------------------------------------------------------------------------

function update(self, dt)

	nkgui:update(self, dt)

	local sec = os.clock()
	local hr = tonumber(os.date("%H")) / 24
	local min = tonumber(os.date("%M")) / 60
	local datetime = os.date("%X %p")

	local fancystr = "Tech Theme"
	if(self.fancy == 1) then fancystr = "Common Theme" end
	local press = nkgui:widget_button(fancystr, 500, 10, 150, 30)
	if(press == 1) then self.fancy = 1-self.fancy end
	
	if(self.fancy == 1) then 
		nuklear.set_style(3, 0, 0xff177772)
		nkgui:widget_text(0, 0, "App Time:", datetime, hr, min )
		nkgui:widget_text_movable( 50, 100, 20, "Test Node 1", " ", 1.0, 1.0 )
		
		local posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 150, 660-posx, "Moving Handle", " ", 1.0, 1.0 )

		local posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 190, 20, "Moving Widget", " ", 1.0, 1.0 )

		local posy = math.sin(sec) * 100 + 200
		nkgui:widget_text(10, posy, "Moving Text", datetime, hr, min )

		local posy = math.cos(sec) * 100 + 200
		nkgui:widget_text(250, posy, "Moving Text", "with bars", math.sin(sec) * 0.5 + 0.5, math.cos(sec) * 0.5 + 0.5 )

		if(self.winshow == 1) then
			self.winshow, self.winx, self.winy, self.winw, self.winh = nkgui:widget_panel("Main Panel", 
								self.winx, self.winy, self.winw, self.winh, panel_func)
			self.winy = self.winy - nkgui.edge_top
		end 

		local button = nkgui:widget_button("Show Panel", 30, 250, 150, 30)
		if(button == 1 and button ~= self.prev_button) then self.winshow = 1-self.winshow end
		self.prev_button = button
	else 
		nuklear.set_style(4, 255, 0xffffffff)
		nuklear.overview_demo()
	end

	nkgui:render()
end

--------------------------------------------------------------------------------

function on_input(self, action_id, action)

	local handled = nkgui:handle_input(self, action_id, action)
	return handled
end

--------------------------------------------------------------------------------

