local tinsert = table.insert

local nkgui = require("nuklear.utils.gui")
local img1 = nil
--------------------------------------------------------------------------------

function init(self)

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/camera#camera", "acquire_camera_focus")
	
	msg.post("@render:", "clear_color", {color = vmath.vector4(0, 0, 0, 1)})
	-- size of texture when scaled to nearest power of two

	self.winx = 30
	self.winy = 300
	self.winw = 400
	self.winh = 300

	self.winshow = 1

	self.fancy = 1

	local font = {
		path = "/example/fonts/Teachers-VariableFont_wght.ttf",
		size = 16.0,
		resolution = 2048,
	}

	local gui_data = {
		theme_id = 3,
		resource_path = go.get("/gui#model", "texture0"),
		resolution = 1920,
	}

	nkgui:setup_gui( "/gui", "/camera#camera", gui_data.resolution )

	if(self.fancy == 0) then 	
		-- Green theme
		nkgui.colors.bg1 = 0xff177772
		nkgui.colors.bg2 = 0xff29f9e5
		nkgui.colors.fg1 = 0x800c3d46
		nkgui:init(gui_data.resolution, gui_data.resolution, 0, gui_data, font)
	else 
		gui_data.theme_id = 4
		nkgui:init(gui_data.resolution, gui_data.resolution, 255, gui_data, font)
	end
	-- self.winshow = nkgui:widget_panel("Main Panel", 30, 300, 400, 300, panel_func)
	nuklear.show_cursor(1)
	defos.set_cursor_visible(false)

	local f = io.open("example/images/image1.png", "rb")
	if(f) then 
		local image = f:read("*a")
		local info = png.info(image)
		local tbytes = 3
		if(info.colortype == 6) then bytes = 4 end 
		
		local buf, w, h = png.decode_rgba(image)
		img1 = nuklear.create_image(w, h, bytes, buf)
		
		print(info.width)
		print(info.height)
		print(info.colortype)
		print(info.bitdepth)
		f:close()
	end	
end

--------------------------------------------------------------------------------

local function panel_func( left, top, width, height )

	nuklear.fill_rect(left, top + 450, width + 30, height + 30, 0, 0xff000000)
	
	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_begin(50, 2)
	nuklear.layout_space_push(22, 0, 300, 30)
	nuklear.label("text 1", 1)

	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_push(55, 20, 300, 30)
	nuklear.label("text 2", 1)
	nuklear.layout_space_end()

	nuklear.layout_space_push(20, 40, 300, 300)
	nuklear.image_color( img1, 0x00797979 )
	nuklear.layout_space_end()

	local res = nuklear.layout_tree_push(0, "Scene", 1)

	if (res ~= 0) then 
	nuklear.layout_row_dyn(50, 2)
	nuklear.label("text 1", 1)	
	nuklear.label("text 2", 1)
	nuklear.layout_tree_pop()
	end
	
	res = nuklear.layout_tree_push(0, "Cameras", 1)
	
	if (res ~= 0) then
	nuklear.layout_row_dyn(50, 2)
	nuklear.label("text 1", 1)
	nuklear.label("text 2", 1)
	nuklear.layout_tree_pop()
	end
end

--------------------------------------------------------------------------------

local chart = {
	0xff29f9e5, 
	-1.0,
	-0.8,
	-0.4,
	0.0,
	0.4,
	0.8,
	1.0,
	-1.0,
	1.0,
	-1.0,
	1.0,
}

local chart_timer = 0.0

local function update_chart(dt)
	chart_timer = chart_timer + dt 
	if(chart_timer > 1.0) then 
		chart_timer = chart_timer - 1.0
		local new_value = math.random(-1.0, 1.0) 
		-- copy down 
		for i=11, 2, -1 do 
			chart[i+1] = chart[i]
		end 
		chart[2] = new_value
	end
	
end

--------------------------------------------------------------------------------

function update(self, dt)

	nkgui:update(self, dt)
	update_chart(dt)

	local sec = os.clock()
	local hr = tonumber(os.date("%H")) / 24
	local min = tonumber(os.date("%M")) / 60
	local datetime = os.date("%X %p")

	local fancystr = "Tech Theme"
	if(self.fancy == 1) then fancystr = "Common Theme" end
	local press = nkgui:widget_button(fancystr, 500, 10, 150, 30)
	if(press == 1) then self.fancy = 1-self.fancy end

		
	if(self.fancy == 1) then 
		nkgui.colors.bg1 = 0xff177772
		nkgui.colors.bg2 = 0xff29f9e5
		nkgui.colors.fg1 = 0x800c3d46
		nuklear.set_style(3, 0, 0xffffffff) --0xff177772)
		nuklear.set_style_prop(20, 0xff000000)
				
		nkgui:widget_text(0, 0, "App Time:", datetime, hr, min )
		nkgui:widget_text_movable( 50, 100, 20, "Test Node 1", " ", 1.0, 1.0 )
		
		local posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 150, 660-posx, "Moving Handle", " ", 1.0, 1.0 )

		posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 190, 20, "Moving Widget", " ", 1.0, 1.0 )

		local posy = math.sin(sec) * 100 + 200
		nkgui:widget_text(10, posy, "Moving Text", datetime, hr, min )

		posy = math.cos(sec) * 100 + 200
		nkgui:widget_text(250, posy, "Moving Text", "with bars", math.sin(sec) * 0.5 + 0.5, math.cos(sec) * 0.5 + 0.5 )

		if(self.winshow == 1) then
			self.winshow, self.winx, self.winy, self.winw, self.winh = nkgui:widget_panel("Main Panel", 
							self.winx, self.winy, self.winw, self.winh, panel_func)
			self.winy = self.winy - nkgui.edge_top
		end 

		local button = nkgui:widget_button("Show Panel", 30, 250, 150, 30)
		if(button == 1 and button ~= self.prev_button) then self.winshow = 1-self.winshow end
		self.prev_button = button

		nkgui:widget_panel("Chart", 600, 300, 200, 80, function( left,top,width, height)
			nuklear.layout_row_dyn(20, 1)
			nuklear.line_chart(0x1, chart)
		end)

		nkgui:widget_chart_movable( posx, 400, 200, "Moving Chart", 1.0, 1.0, chart )
		nkgui:widget_chart(600, posy + 300, "Moving Chart", hr, min, chart )

	else 
		nuklear.set_style(4, 255, 0xffffffff)
		nuklear.overview_demo(10, 460)
	end

	nkgui:render()
end

--------------------------------------------------------------------------------

function on_input(self, action_id, action)

	local handled = nkgui:handle_input(self, action_id, action)
	return handled
end

--------------------------------------------------------------------------------

