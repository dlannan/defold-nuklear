local tinsert = table.insert

local nkgui = require("nuklear.utils.gui")

--------------------------------------------------------------------------------

function init(self)

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/camera#camera", "acquire_camera_focus")
	
	msg.post("@render:", "clear_color", {color = vmath.vector4(0, 0, 0, 1)})
	-- size of texture when scaled to nearest power of two

	self.mouse = { x = 0, y = 0 }
	self.evt_queue = {}
	self.prev_button = 0
	self.state = ""

	self.winx = 30
	self.winy = 300
	self.winw = 400
	self.winh = 300

	self.winshow = 1
	
	-- Green theme
	nkgui.colors.bg1 = 0xff177772
	nkgui.colors.bg2 = 0xff29f9e5
	nkgui.colors.fg1 = 0x800c3d46
	
	nkgui:init(960, 960, 0)
	self.winshow = nkgui:widget_panel("Main Panel", 30, 300, 400, 300, panel_func)
end

--------------------------------------------------------------------------------

local function panel_func( left, top, width, height )
	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_begin(50, 2)
	nuklear.layout_space_push(22, 0, 300, 30)
	nuklear.label("text 1", 1)

	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_push(55, 20, 300, 30)
	nuklear.label("text 2", 1)
	nuklear.layout_space_end()
end

--------------------------------------------------------------------------------

function update(self, dt)

	nuklear.input_begin()
	for k,v in pairs(self.evt_queue) do 
		if(v.evt == "button") then 
			nuklear.input_button( v.button, v.x, v.y, v.down )
		elseif (v.evt == "motion") then 
			nuklear.input_motion( v.x, v.y )
		end
	end
	nuklear.input_end()
	local events = #self.evt_queue
	self.evt_queue = {}

	nuklear.clear()

	local sec = os.clock()
	local hr = tonumber(os.date("%H")) / 24
	local min = tonumber(os.date("%M")) / 60
	local datetime = os.date("%X %p")
	nkgui:widget_text(0, 0, "App Time:", datetime, hr, min )
	nkgui:widget_text_movable( 50, 100, 20, "Test Node 1", " ", 1.0, 1.0 )
	
	local posx = math.sin(sec) * 100 + 480
	nkgui:widget_text_movable( posx, 150, 660-posx, "Moving Handle", " ", 1.0, 1.0 )

	local posx = math.sin(sec) * 100 + 480
	nkgui:widget_text_movable( posx, 190, 20, "Moving Widget", " ", 1.0, 1.0 )

	local posy = math.sin(sec) * 100 + 200
	nkgui:widget_text(10, posy, "Moving Text", datetime, hr, min )

	local posy = math.cos(sec) * 100 + 200
	nkgui:widget_text(250, posy, "Moving Text", "with bars", math.sin(sec) * 0.5 + 0.5, math.cos(sec) * 0.5 + 0.5 )

	if(self.winshow == 1) then
		self.winshow, self.winx, self.winy, self.winw, self.winh = nkgui:widget_panel("Main Panel", self.winx, self.winy, self.winw, self.winh, panel_func)
		self.winy = self.winy - nkgui.edge_top
	end 

	local button = nkgui:widget_button(" Show Panel", 30, 250, 150, 30)
	if(button == 1 and button ~= self.prev_button) then self.winshow = 1-self.winshow end
	self.prev_button = button
	
	nkgui:render()		
end

--------------------------------------------------------------------------------

function on_input(self, action_id, action)

	if action_id == hash("touch") then

		if action.pressed then 
			self.state = "pressed"
			tinsert(self.evt_queue, { 
				evt = "button", button = 0, 
				x = action.x, 
				y = nkgui.window.height - action.y + nkgui.edge_top, 
				down = 1,
			} )			
			print("Pressed: "..self.state)
		elseif action.released then 
			self.state = ""
			tinsert(self.evt_queue, { 
				evt = "button", button = 0, 
				x = action.x, 
				y = nkgui.window.height - action.y + nkgui.edge_top, 
				down = 0,
			} )
			print("Released: "..self.state)
		end
	end
	
	local xdiff = action.x -self.mouse.x 
	local ydiff = nkgui.window.height - action.y + nkgui.edge_top - self.mouse.y 
	if( xdiff ~= 0 or ydiff ~= 0 ) then 
		if( nuklear.input_get_grabbed() == 1) then
			tinsert(self.evt_queue, { evt = "motion", x = xdiff, y = ydiff } )
		else
			tinsert(self.evt_queue, { evt = "motion", x = action.x, y = nkgui.window.height - action.y + nkgui.edge_top } )
		end
	end

	self.mouse.x = action.x 
	self.mouse.y = nkgui.window.height - action.y + nkgui.edge_top
	return true
end

--------------------------------------------------------------------------------

