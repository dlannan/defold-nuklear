local tinsert = table.insert

local nkgui = require("nuklear.utils.gui")

--------------------------------------------------------------------------------

function init(self)

	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_camera_projection")
	msg.post("/camera#camera", "acquire_camera_focus")
	
	msg.post("@render:", "clear_color", {color = vmath.vector4(0, 0, 0, 1)})
	-- size of texture when scaled to nearest power of two

	self.mouse = { x = 0, y = 0 }
	self.evt_queue = {}
	self.prev_button = 0

	self.state = 0
	self.state_changed = false

	self.winx = 30
	self.winy = 300
	self.winw = 400
	self.winh = 300

	self.winshow = 1

	self.fancy = 0

	if(self.fancy == 0) then 	
		-- Green theme
		nkgui.colors.bg1 = 0xff177772
		nkgui.colors.bg2 = 0xff29f9e5
		nkgui.colors.fg1 = 0x800c3d46
		nkgui:init(960, 960, 0, 3)
	else 
		nkgui:init(960, 960, 255, 4)
	end
	self.winshow = nkgui:widget_panel("Main Panel", 30, 300, 400, 300, panel_func)
end

--------------------------------------------------------------------------------

local function panel_func( left, top, width, height )
	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_begin(50, 2)
	nuklear.layout_space_push(22, 0, 300, 30)
	nuklear.label("text 1", 1)

	-- nuklear.layout_row_static(10, 400, 1)
	nuklear.layout_space_push(55, 20, 300, 30)
	nuklear.label("text 2", 1)
	nuklear.layout_space_end()
end

--------------------------------------------------------------------------------

function update(self, dt)

	if(self.state_changed == true) then 
		tinsert(self.evt_queue, { 
			evt = "button", button = 0, 
			x =self.mouse.x, 
			y = self.mouse.y, 
			down = self.state,
		} )	
	end 
	
	local events = #self.evt_queue
	nuklear.input_begin()
	for k,v in pairs(self.evt_queue) do 
		if(v.evt == "button") then 
			nuklear.input_button( v.button, v.x, v.y, v.down )
		end
		if (v.evt == "motion") then 
			if(self.state == 1) then nuklear.input_button( 0, v.x, v.y, 1 ) end
			nuklear.input_motion( v.x, v.y )
		end
	end
	nuklear.input_end()
	self.evt_queue = {}

	local sec = os.clock()
	local hr = tonumber(os.date("%H")) / 24
	local min = tonumber(os.date("%M")) / 60
	local datetime = os.date("%X %p")

	local fancystr = "Tech Theme"
	if(self.fancy == 1) then fancystr = "Common Theme" end
	local press = nkgui:widget_button(fancystr, 500, 10, 150, 30)
	if(press == 1) then self.fancy = 1-self.fancy end
	
	if(self.fancy == 1) then 
		nuklear.set_style(3, 0, 0xff177772)
		nkgui:widget_text(0, 0, "App Time:", datetime, hr, min )
		nkgui:widget_text_movable( 50, 100, 20, "Test Node 1", " ", 1.0, 1.0 )
		
		local posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 150, 660-posx, "Moving Handle", " ", 1.0, 1.0 )

		local posx = math.sin(sec) * 100 + 480
		nkgui:widget_text_movable( posx, 190, 20, "Moving Widget", " ", 1.0, 1.0 )

		local posy = math.sin(sec) * 100 + 200
		nkgui:widget_text(10, posy, "Moving Text", datetime, hr, min )

		local posy = math.cos(sec) * 100 + 200
		nkgui:widget_text(250, posy, "Moving Text", "with bars", math.sin(sec) * 0.5 + 0.5, math.cos(sec) * 0.5 + 0.5 )

		if(self.winshow == 1) then
			self.winshow, self.winx, self.winy, self.winw, self.winh = nkgui:widget_panel("Main Panel", 
								self.winx, self.winy, self.winw, self.winh, panel_func)
			self.winy = self.winy - nkgui.edge_top
		end 

		local button = nkgui:widget_button("Show Panel", 30, 250, 150, 30)
		if(button == 1 and button ~= self.prev_button) then self.winshow = 1-self.winshow end
		self.prev_button = button
	else 
		nuklear.set_style(4, 255, 0xffffffff)
		nuklear.overview_demo()
	end

	nkgui:render()
end

--------------------------------------------------------------------------------

function on_input(self, action_id, action)

	self.state_changed = false
	if action_id == hash("touch") then

		if action.pressed == true then 
			self.state = 1
			self.state_changed = true
		end
		if action.released == true then 
			self.state = 0
			self.state_changed = true
		end
	end
	
	local xdiff = action.x -self.mouse.x 
	local ydiff = nkgui.window.height - action.y + nkgui.edge_top - self.mouse.y 
	if( xdiff ~= 0 or ydiff ~= 0 ) then 
		tinsert(self.evt_queue, { evt = "motion", x = action.x, y = nkgui.window.height - action.y + nkgui.edge_top } )
	end

	self.mouse.x = action.x 
	self.mouse.y = nkgui.window.height - action.y + nkgui.edge_top
	return true
end

--------------------------------------------------------------------------------

